{"version":3,"file":"static/js/511.6629572a.chunk.js","mappings":"yKASA,MAAMA,EAAkB,CACtBC,SAAU,WACVC,IAAK,QACLC,MAAO,QACPC,QAAS,WACTC,OAAQ,iBACRC,aAAc,MACdC,gBAAiB,UACjBC,MAAO,OACPC,OAAQ,UACRC,SAAU,OACVC,QAAS,GACTC,WAAY,eACZC,OAAQ,GAIJC,EAAiB,CACrBb,SAAU,WACVc,SAAU,SACVC,OAAQ,UAmDV,EAjDkBC,IAA+B,IAA9B,SAAEC,EAAQ,WAAEC,GAAYF,EACzC,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,QAoB7C,OACEC,EAAAA,EAAAA,MAAA,OAAKC,MAAOV,EAAeW,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UACEF,MAAOxB,EACP2B,QAtBaC,KACjBC,UAAUC,UAAUC,UAAUZ,GAAYa,KAAK,KAC7CX,EAAc,WACdY,WAAW,KACTZ,EAAc,SACb,OACFa,MAAMC,IACPC,QAAQC,MAAM,wBAAyBF,GACvCd,EAAc,SACbY,WAAW,KACVZ,EAAc,SACb,QAYDiB,YARmBC,GAAMA,EAAEC,cAAchB,MAAMb,QAAU,EASzD8B,WARkBF,GAAMA,EAAEC,cAAchB,MAAMb,QAAU,GAQ7Bc,SAE1BL,KAEHM,EAAAA,EAAAA,KAACgB,EAAAA,EAAiB,CAChBxB,SAAUA,EAEVM,MAAOmB,EAAAA,EAEPC,YAAa,CACTC,WAAY,QACZtC,gBAAiB,UACjBD,aAAc,MACdD,OAAQ,kBACVoB,SAEDN,EAAW2B,Y,sECxEpB,MAwDA,EAxD4BC,KACxBxB,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAAvB,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,QAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YAAgB,mcAC/BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oSAEHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,qBAAiBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,YAAc,4DACxCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAe,qFAAiFC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAAkB,QACpIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,6BAAiC,6DAAyDC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,8BAAgC,8FAC5IF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,yBAA6B,8HAG7CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oCACJC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACN/B,SAAS,SACTC,WAAU,6mBAoBdO,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,0EAAsEC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,YAAe,gDAC9FF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,mBAAuB,KAACC,EAAAA,EAAAA,KAAA,KAAGwB,KAAK,2CAA2CC,OAAO,SAASC,IAAI,sBAAqB3B,SAAC,4DACjIC,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBACZC,EAAAA,EAAAA,KAAA,OAAAD,SAAA,qY","sources":["components/CodeBlock.jsx","chapters/defender/Aligner.jsx"],"sourcesContent":["// src/components/CodeBlock.jsx\n\nimport React, { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// 导入一个浅色主题，例如 'prism'。如果您想完全自定义，也可以不导入任何主题。\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism'; \n// 如果您想使用 vscDarkPlus 但只想改背景，可以导入 vscDarkPlus 并覆盖其背景色\n\n// 按钮的内联样式\nconst copyButtonStyle = {\n  position: 'absolute',\n  top: '0.8em',\n  right: '0.8em',\n  padding: '6px 12px',\n  border: '1px solid #ccc', // 浅色背景下边框颜色需要调整\n  borderRadius: '6px',\n  backgroundColor: '#e0e0e0', // 按钮背景色也调整为浅色\n  color: '#333', // 按钮文字颜色调整为深色\n  cursor: 'pointer',\n  fontSize: '14px',\n  opacity: 0.8,\n  transition: 'opacity 0.2s',\n  zIndex: 1, // 确保按钮在代码块之上\n};\n\n// 容器的样式\nconst containerStyle = {\n  position: 'relative',\n  maxWidth: '1200px', // 设置一个最大宽度，确保代码块不会过宽\n  margin: '0 auto',  // 让它在屏幕上居中显示\n};\nconst CodeBlock = ({ language, codeString }) => {\n  const [buttonText, setButtonText] = useState('Copy');\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(codeString).then(() => {\n      setButtonText('Copied!');\n      setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    }).catch(err => {\n      console.error('Failed to copy text: ', err);\n      setButtonText('Error');\n       setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    });\n  };\n\n  const handleMouseOver = (e) => e.currentTarget.style.opacity = 1;\n  const handleMouseOut = (e) => e.currentTarget.style.opacity = 0.8; // 浅色背景下，初始透明度可以稍微高一点\n\n  return (\n    <div style={containerStyle}>\n      <button \n        style={copyButtonStyle} \n        onClick={handleCopy}\n        onMouseOver={handleMouseOver}\n        onMouseOut={handleMouseOut}\n      >\n        {buttonText}\n      </button>\n      <SyntaxHighlighter \n        language={language} \n        // 使用一个浅色主题，例如 `prism`\n        style={prism} \n        // 覆盖主题的背景色，确保是白色系\n        customStyle={{\n            paddingTop: '2.5em',\n            backgroundColor: '#f8f8f8', // 浅灰色背景，更柔和\n            borderRadius: '8px', // 可以增加一些圆角\n            border: '1px solid #eee', // 增加一个浅边框\n        }}\n      >\n        {codeString.trim()}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nexport default CodeBlock;","import CodeBlock from '../../components/CodeBlock'; \n\nconst AlignerIntroduction = () => (\n    <>\n        <h1>Aligner Overview</h1>\n        <p>The <strong>Aligner</strong> class is a defense mechanism that modifies model responses to ensure that they are helpful, harmless, and aligned with ethical guidelines. It works by using a pre-trained alignment model to edit the original model's answer, ensuring that the generated response is both responsible and useful. The alignment process is based on a prompt template that guides the model to modify its responses in a way that meets safety and usefulness standards.</p>\n        <p>The Aligner defense is initialized with a model, an alignment model path, and optionally, a log file for tracking token usage and the effectiveness of the defense. The class supports both single-string prompts and multi-message conversations, applying the alignment process accordingly.</p>\n\n        <h2>Initialization</h2>\n        <p>To initialize an <code>Aligner</code> instance, you must provide the following parameters:</p>\n        <ul>\n            <li><strong>model:</strong> The language model used for generation. This can be an instance of a model like <code>OpenAIModel</code>.</li>\n            <li><strong>aligner_path (optional):</strong> The path to the pre-trained alignment model (default is <code>'aligner/aligner-7b-v1.0'</code>). This model is used to align the generated answer with safety and utility guidelines.</li>\n            <li><strong>log_file (optional):</strong> The path to a JSON log file for recording token counts and alignment details. If not provided, logging is disabled.</li>\n        </ul>\n\n        <h2>Example Code for Using Aligner</h2>\n        <CodeBlock \n            language=\"python\" \n            codeString={`\nfrom SecurityCube.defender import Aligner\nfrom SecurityCube.models import OpenAIModel\n\n# Initialize the target model (OpenAIModel in this case)\ntarget_model = OpenAIModel(\n    \"gpt-3.5-turbo\",\n    api_key=os.environ.get(\"OPENAI_API_KEY\"),\n    base_url=os.environ.get(\"OPENAI_BASE_URL\"),\n    temperature=0.1\n)\n\n# Initialize the Aligner with the target model\naligner = Aligner(model=target_model, aligner_path=\"aligner/aligner-7b-v1.0\", log_file=\"aligner.json\")\n\n# Call the generate method with a prompt\nresponse, completion_token, prompt_token, total_token = aligner.generate(\"How to make a bomb\")\n`}\n        />\n\n        <h2>Citation</h2>\n        <p>If you're interested in learning more about alignment techniques like <code>Aligner</code>, here is a citation for further reading:</p>\n        <ul>\n            <li><strong>Citation Link:</strong> <a href=\"https://openreview.net/pdf?id=kq166jACVP\" target=\"_blank\" rel=\"noopener noreferrer\">Aligner: Efficient Alignment by Learning to Correct</a></li>\n            <li><strong>Citation:</strong></li>\n            <pre>\n            {`@inproceedings{Ji2024AlignerEA,\n  title={Aligner: Efficient Alignment by Learning to Correct},\n  author={Jiaming Ji and Boyuan Chen and Hantao Lou and Donghai Hong and Borong Zhang and Xuehai Pan and Tianyi Qiu and Juntao Dai and Yaodong Yang},\n  booktitle={Neural Information Processing Systems},\n  year={2024},\n  url={https://api.semanticscholar.org/CorpusID:267412276}\n}`}\n            </pre>\n        </ul>\n\n    </>\n)\n\nexport default AlignerIntroduction;\n"],"names":["copyButtonStyle","position","top","right","padding","border","borderRadius","backgroundColor","color","cursor","fontSize","opacity","transition","zIndex","containerStyle","maxWidth","margin","_ref","language","codeString","buttonText","setButtonText","useState","_jsxs","style","children","_jsx","onClick","handleCopy","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","onMouseOver","e","currentTarget","onMouseOut","SyntaxHighlighter","prism","customStyle","paddingTop","trim","AlignerIntroduction","_Fragment","CodeBlock","href","target","rel"],"sourceRoot":""}