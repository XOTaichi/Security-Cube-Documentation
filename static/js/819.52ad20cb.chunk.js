"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[819],{6633:(e,s,n)=>{n.d(s,{A:()=>a});var t=n(5043),r=n(2210),i=n(2196),o=n(579);const l={position:"absolute",top:"0.8em",right:"0.8em",padding:"6px 12px",border:"1px solid #ccc",borderRadius:"6px",backgroundColor:"#e0e0e0",color:"#333",cursor:"pointer",fontSize:"14px",opacity:.8,transition:"opacity 0.2s",zIndex:1},d={position:"relative",maxWidth:"1200px",margin:"0 auto"},a=e=>{let{language:s,codeString:n}=e;const[a,c]=(0,t.useState)("Copy");return(0,o.jsxs)("div",{style:d,children:[(0,o.jsx)("button",{style:l,onClick:()=>{navigator.clipboard.writeText(n).then(()=>{c("Copied!"),setTimeout(()=>{c("Copy")},2e3)}).catch(e=>{console.error("Failed to copy text: ",e),c("Error"),setTimeout(()=>{c("Copy")},2e3)})},onMouseOver:e=>e.currentTarget.style.opacity=1,onMouseOut:e=>e.currentTarget.style.opacity=.8,children:a}),(0,o.jsx)(r.A,{language:s,style:i.A,customStyle:{paddingTop:"2.5em",backgroundColor:"#f8f8f8",borderRadius:"8px",border:"1px solid #eee"},children:n.trim()})]})}},7200:(e,s,n)=>{n.r(s),n.d(s,{default:()=>i});var t=n(6633),r=n(579);const i=()=>(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h1",{children:"Defender Introduction"}),(0,r.jsxs)("p",{children:["The ",(0,r.jsx)("code",{children:"DefenderPipeline"})," class, located in ",(0,r.jsx)("code",{children:"SecurityCube/defender/base.py"}),", serves as an abstract base for building defender pipelines. It helps in safeguarding models by generating responses that resist adversarial attacks. Subclasses implement the ",(0,r.jsx)("code",{children:"generate"})," method to produce a defense response based on the input prompt."]}),(0,r.jsx)("h2",{children:"DefenderPipeline Class Interface"}),(0,r.jsxs)("p",{children:["The ",(0,r.jsx)("code",{children:"DefenderPipeline"})," class defines the following key components:"]}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"File location:"})," ",(0,r.jsx)("code",{children:"SecurityCube/defender/base.py"})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Constructor:"})," The ",(0,r.jsx)("code",{children:"__init__"})," method initializes the defender pipeline."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"formalize(prompt):"})," This method processes the raw input prompt and formalizes it for the defense pipeline, returning a list of messages with roles."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"generate(prompt):"})," This abstract method must be implemented by subclasses to generate a defense response. It takes in:",(0,r.jsx)("ul",{children:(0,r.jsxs)("li",{children:[(0,r.jsx)("code",{children:"prompt"}),": The input prompt which can be a string or a list of formatted ",(0,r.jsx)("code",{children:"ChatMessage"})," objects."]})})]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Returns:"})," The ",(0,r.jsx)("code",{children:"generate"})," method must return a tuple with the following:",(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:["The generated response text (",(0,r.jsx)("code",{children:"str"}),")."]}),(0,r.jsxs)("li",{children:["Completion tokens used (",(0,r.jsx)("code",{children:"int"}),")."]}),(0,r.jsxs)("li",{children:["Prompt tokens used (",(0,r.jsx)("code",{children:"int"}),")."]}),(0,r.jsxs)("li",{children:["Total tokens used (",(0,r.jsx)("code",{children:"int"}),")."]})]})]})]}),(0,r.jsx)(t.A,{language:"python",codeString:'\nfrom abc import ABC, abstractmethod\nfrom typing import Union, List, Tuple, Dict, TypedDict\n\nclass ChatMessage(TypedDict):\n    """Represents a single message in a conversation history."""\n    role: str\n    content: str\n\n\nclass DefenderPipeline(ABC):\n    """\n    Abstract base class for a defender pipeline.\n\n    Subclasses must implement the `generate` method and can override the\n    `formalize` method for custom prompt structuring.\n    """\n\n    def formalize(self, prompt: str) -> List[ChatMessage]:\n        """\n        Formalizes the user\'s input string into a basic message list.\n        """\n        return [{"role": "user", "content": prompt}]\n\n    @abstractmethod\n    def generate(self, prompt: Union[str, List[ChatMessage]]) -> Tuple[str, int, int, int]:\n        """\n        Generates a response and token counts from the defender pipeline.\n        """\n        pass\n\n    def get_name(self) -> str:\n        """Returns the name of the defender pipeline class."""\n        return self.__class__.__name__\n'}),(0,r.jsx)("h2",{children:"Common Types of Defense Methods"}),(0,r.jsx)("p",{children:"We categorize defense methods into five types based on their deployment stage in the model pipeline:"}),(0,r.jsxs)("ul",{children:[(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Finetune-based:"})," Enhance robustness by retraining or further aligning the model to specific defense strategies."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"System prompt:"})," Insert safety instructions at the system prompt level to guide model behavior and prevent unsafe responses."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Prefilter:"})," Detect and block malicious inputs before they are processed by the model, often using classifiers or predefined rules."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Intraprocess:"})," Intervene during inference by modifying or monitoring the decoding process, ensuring that unsafe content is filtered at runtime."]}),(0,r.jsxs)("li",{children:[(0,r.jsx)("strong",{children:"Postfilter:"})," Filter or revise outputs after generation to suppress unsafe or harmful content, ensuring that the final response aligns with safety protocols."]})]})]})}}]);
//# sourceMappingURL=819.52ad20cb.chunk.js.map