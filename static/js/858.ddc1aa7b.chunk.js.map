{"version":3,"file":"static/js/858.ddc1aa7b.chunk.js","mappings":"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","sources":["chapters/language-models/using-prebuilt-models.jsx","components/CodeBlock.jsx"],"sourcesContent":["import CodeBlock from '../../components/CodeBlock'; \n\nconst ModelIntroduction = () => (\n  <>\n    <h1>Supported Models</h1>\n    <p>We support various models through a unified interface, including OpenAI, Huggingface, Qwen3, and more.</p>\n\n    <h2>Using OpenAI Model</h2>\n    <CodeBlock \n      language=\"python\" \n      codeString={`\nfrom SecurityCube.models import OpenAIModel\nimport os\n\n# Initialize OpenAI Model with custom generation parameters\ntest_gpt = OpenAIModel(\n    api_key=os.environ.get(\"OPENAI_API_KEY\"), \n    base_url=os.environ.get(\"OPENAI_BASE_URL\"), \n    temperature=0.1,\n    model_name=\"gpt-3.5-turbo\"\n)\n\n# Generate a response\nres = test_gpt.generate(\"hi\")\nprint(res)\n\n# Expected answer format: ('Hello! How can I assist you today?', 9, 8, 17)\n      `}\n    />\n    <h3>Initialized Parameters</h3>\n    <p>The <code>OpenAIModel</code> class is initialized with the following parameters:</p>\n    <ul>\n      <li><strong>model_name (str):</strong> Name of the model, e.g., \"gpt-4\", \"gpt-3.5-turbo\".</li>\n      <li><strong>api_key (str):</strong> Your OpenAI API key.</li>\n      <li><strong>base_url (str, optional):</strong> Custom base URL for API endpoints. Defaults to <strong>None</strong>.</li>\n      <li><strong>supports_system_prompt (bool):</strong> Whether the endpoint supports the system role. Defaults to <strong>True</strong> for OpenAI models.</li>\n      <li><strong>kwargs:</strong> Additional generation parameters like `temperature`, `top_p`, and others that define the model's behavior for generating text. These are passed as keyword arguments.</li>\n    </ul>\n\n    <h2>Using HuggingFace Model</h2>\n    <CodeBlock \n      language=\"python\" \n      codeString={`\nfrom SecurityCube.models import HuggingFaceModel\n\n# Initialize HuggingFace Model with custom generation parameters\ntest_qwen = HuggingFaceModel(\n    model_name=\"microsoft/Phi-3.5-mini-instruct\", \n    temperature=0.1,\n    config_dir=\"config\", \n    config_name=\"phi-3\"\n)\n\n# Generate a response\nres = test_qwen.generate(\"hi\")\nprint(res)\n      `}\n    />\n    <h3>Initialized Parameters</h3>\n    <p>The <code>HuggingFaceModel</code> class is initialized with the following parameters:</p>\n    <ul>\n      <li><strong>model_name (str):</strong> The path or repository name of the model, e.g., \"microsoft/Phi-3.5-mini-instruct\".</li>\n      <li><strong>config_dir (str):</strong> Directory containing the configuration files for the model (see <a href=\"https://github.com/chujiezheng/chat_templates\">chat_templates</a>).</li>\n      <li><strong>config_name (str):</strong> Name of the specific configuration file within <code>config_dir</code>.</li>\n      <li><strong>kwargs:</strong> Additional generation parameters like `temperature`, `top_p`, and others that define the model's behavior for generating text. These are passed as keyword arguments.</li>\n    </ul>\n\n    <h2>Using QwenReasoning Model</h2>\n    <CodeBlock \n      language=\"python\" \n      codeString={`\nfrom SecurityCube.models import QwenReasoningModel\nimport os\n\n# Initialize QwenReasoning Model with custom generation parameters\ntest_qwen3 = QwenReasoningModel(\n    api_key=os.environ.get(\"QWEN_API_KEY\"), \n    base_url=os.environ.get(\"QWEN_BASE_URL\"),\n    temperature=0.1, \n    model_name=\"qwen3-30b-a3b-thinking-2507\", \n    enable_thinking=True, \n    stream=True\n)\n\n# Generate a response\nres = test_qwen3.generate(\"hi\")\nprint(res)\n      `}\n    />\n    <h3>Initialized Parameters</h3>\n    <p>The <code>QwenReasoningModel</code> class is initialized with the following parameters:</p>\n    <ul>\n      <li><strong>model_name (str):</strong> Name of the model, e.g., \"qwen3-30b-a3b-thinking-2507\".</li>\n      <li><strong>api_key (str):</strong> Your Qwen API key.</li>\n      <li><strong>base_url (str, optional):</strong> Custom base URL for API endpoints.</li>\n      <li><strong>stream (bool):</strong> Whether to stream the response or not. Defaults to <strong>False</strong>.</li>\n      <li><strong>enable_thinking (bool):</strong> Whether to enable reasoning capability for the model.</li>\n      <li><strong>kwargs:</strong> Additional generation parameters like `temperature`, `top_p`, and others.</li>\n    </ul>\n\n    <h2>Using OpenAI Embedding Model</h2>\n    <CodeBlock \n      language=\"python\" \n      codeString={`\nfrom SecurityCube.models import OpenAIProvider\nimport os\n\n# Initialize OpenAI Embedding Provider\ntest_qwen = OpenAIProvider(api_key=os.environ.get(\"OPENAI_API_KEY\"), base_url=os.environ.get(\"OPENAI_BASE_URL\"))\n\n# Encode text into embeddings\ntext = \"This is a sample text to be embedded.\"\nres = test_qwen.encode([text])\nprint(res)\n\n# Expected output: A list of embeddings for the provided text\n      `}\n    />\n    <h3>Initialized Parameters</h3>\n    <p>The <code>OpenAIProvider</code> class is initialized with the following parameters:</p>\n    <ul>\n      <li><strong>model_name (str):</strong> Name of the model, e.g., \"text-embedding-3-small\".</li>\n      <li><strong>api_key (str):</strong> Your OpenAI API key.</li>\n      <li><strong>base_url (str, optional):</strong> Custom base URL for API endpoints.</li>\n    </ul>\n  </>\n);\n\nexport default ModelIntroduction;\n","// src/components/CodeBlock.jsx\n\nimport React, { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// 导入一个浅色主题，例如 'prism'。如果您想完全自定义，也可以不导入任何主题。\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism'; \n// 如果您想使用 vscDarkPlus 但只想改背景，可以导入 vscDarkPlus 并覆盖其背景色\n\n// 按钮的内联样式\nconst copyButtonStyle = {\n  position: 'absolute',\n  top: '0.8em',\n  right: '0.8em',\n  padding: '6px 12px',\n  border: '1px solid #ccc', // 浅色背景下边框颜色需要调整\n  borderRadius: '6px',\n  backgroundColor: '#e0e0e0', // 按钮背景色也调整为浅色\n  color: '#333', // 按钮文字颜色调整为深色\n  cursor: 'pointer',\n  fontSize: '14px',\n  opacity: 0.8,\n  transition: 'opacity 0.2s',\n  zIndex: 1, // 确保按钮在代码块之上\n};\n\n// 容器的样式\nconst containerStyle = {\n  position: 'relative',\n  maxWidth: '1200px', // 设置一个最大宽度，确保代码块不会过宽\n  margin: '0 auto',  // 让它在屏幕上居中显示\n};\nconst CodeBlock = ({ language, codeString }) => {\n  const [buttonText, setButtonText] = useState('Copy');\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(codeString).then(() => {\n      setButtonText('Copied!');\n      setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    }).catch(err => {\n      console.error('Failed to copy text: ', err);\n      setButtonText('Error');\n       setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    });\n  };\n\n  const handleMouseOver = (e) => e.currentTarget.style.opacity = 1;\n  const handleMouseOut = (e) => e.currentTarget.style.opacity = 0.8; // 浅色背景下，初始透明度可以稍微高一点\n\n  return (\n    <div style={containerStyle}>\n      <button \n        style={copyButtonStyle} \n        onClick={handleCopy}\n        onMouseOver={handleMouseOver}\n        onMouseOut={handleMouseOut}\n      >\n        {buttonText}\n      </button>\n      <SyntaxHighlighter \n        language={language} \n        // 使用一个浅色主题，例如 `prism`\n        style={prism} \n        // 覆盖主题的背景色，确保是白色系\n        customStyle={{\n            paddingTop: '2.5em',\n            backgroundColor: '#f8f8f8', // 浅灰色背景，更柔和\n            borderRadius: '8px', // 可以增加一些圆角\n            border: '1px solid #eee', // 增加一个浅边框\n        }}\n      >\n        {codeString.trim()}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nexport default CodeBlock;"],"names":["ModelIntroduction","_jsxs","_Fragment","children","_jsx","CodeBlock","language","codeString","href","copyButtonStyle","position","top","right","padding","border","borderRadius","backgroundColor","color","cursor","fontSize","opacity","transition","zIndex","containerStyle","maxWidth","margin","_ref","buttonText","setButtonText","useState","style","onClick","handleCopy","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","onMouseOver","e","currentTarget","onMouseOut","SyntaxHighlighter","prism","customStyle","paddingTop","trim"],"sourceRoot":""}