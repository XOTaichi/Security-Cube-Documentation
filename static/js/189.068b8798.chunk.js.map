{"version":3,"file":"static/js/189.068b8798.chunk.js","mappings":"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","sources":["chapters/defender/Hidden_State_Guard.jsx","components/CodeBlock.jsx"],"sourcesContent":["import CodeBlock from '../../components/CodeBlock';\n\nconst LatentGuardIntroduction = () => (\n  <>\n    <h1>LatentGuard Overview</h1>\n\n    <p>\n      The <strong>LatentGuard</strong> class is a defender pipeline that defends model generations\n      by inspecting intermediate hidden states. It wraps a target model and uses a \"weak→strong\" explanation\n      pipeline (e.g., a lightweight probe + stronger classifier) to detect malicious or jailbreak prompts\n      before allowing the target model to generate, or to pre-filter/replace unsafe outputs.\n    </p>\n\n    <h2>Initialization parameters</h2>\n    <p>To create a <code>LatentGuard</code> instance, the important parameters are:</p>\n    <table className=\"param-table\">\n  <thead>\n    <tr>\n      <th>Parameter</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><strong>model</strong></td>\n      <td>The target model wrapped by the guard. Typically, this would be a light wrapper such as <code>Model(OpenAIModel(...))</code>, where the <code>OpenAIModel</code> is the language model being protected.</td>\n    </tr>\n    <tr>\n      <td><strong>guard_model_path</strong></td>\n      <td>Path or Hugging Face model ID of the guard model that is used to extract hidden states. For example, <code>\"models/Llama-2-7b-chat-hf\"</code>.</td>\n    </tr>\n    <tr>\n      <td><strong>guard_model_name (optional)</strong></td>\n      <td>Model ID string used for bookkeeping or naming purposes when training. This is useful for tracking and saving the model's state.</td>\n    </tr>\n    <tr>\n      <td><strong>svm_model_path</strong></td>\n      <td>Path to load/save the SVM classifier. By default, this points to the latent folder in the repository.</td>\n    </tr>\n    <tr>\n      <td><strong>mlp_model_path</strong></td>\n      <td>Path to load/save the MLP classifier. Similar to <code>svm_model_path</code>, but for the MLP model.</td>\n    </tr>\n    <tr>\n      <td><strong>train</strong></td>\n      <td>A boolean flag. If <code>True</code>, LatentGuard will call <code>load_exp_data(...)</code> and train the weak→strong classifiers. If <code>False</code> (default), it will load existing classifiers for inference and will not train.</td>\n    </tr>\n    <tr>\n      <td><strong>log_file (optional)</strong></td>\n      <td>Path for logging decisions, token counts, and metadata related to the guard's operation. If not provided, logging is disabled.</td>\n    </tr>\n  </tbody>\n</table>\n\n\n    <h2>Behavior difference: <code>train=True</code> vs <code>train=False</code></h2>\n    <p>\n      <strong><code>train=True</code></strong>:\n      <ol>\n        <li>LatentGuard loads experiment data by calling <code>load_exp_data(use_conv=True, model_name=...)</code>.</li>\n        <li>It trains one or more classifiers (SVM and/or MLP) on hidden-state representations extracted from the guard model.</li>\n        <li>Trained artifacts are saved to the provided <code>svm_model_path</code> and <code>mlp_model_path</code>.</li>\n        <li>Useful when you want to re-fit classifiers on new model or augmented datasets.</li>\n      </ol>\n    </p>\n    <p>\n      <strong><code>train=False</code></strong>:\n      <ol>\n        <li>LatentGuard attempts to load pre-trained classifiers from <code>svm_model_path</code> and <code>mlp_model_path</code>.</li>\n        <li>It runs only the detection/inference flow and returns or blocks responses according to the classifier outputs.</li>\n        <li>Recommended for production/serving where training should not happen at request time.</li>\n      </ol>\n    </p>\n\n    <h2>Example: training mode (<code>train=True</code>)</h2>\n    <CodeBlock\n      language=\"python\"\n      codeString={`\n# train_latentguard.py\nimport os\nfrom pathlib import Path\nimport sys\nfrom SecurityCube.defender import LatentGuard, DefenderPipeline\nfrom SecurityCube.models import OpenAIModel, Model\n\n# set up project path (so imports find SecurityCube)\ncurrent_file_path = Path(__file__).resolve()\nproject_root = current_file_path.parent.parent.parent\nif str(project_root) not in sys.path:\n    sys.path.append(str(project_root))\n\n# initialize target model (the model being protected)\nprotected_model = OpenAIModel(\n    model_name=\"gpt-3.5-turbo\",\n    api_key=os.environ.get(\"OPENAI_API_KEY\"),\n    base_url=os.environ.get(\"OPENAI_BASE_URL\"),\n    temperature=0.1\n)\n\n# Create LatentGuard in training mode.\n# It will call load_exp_data(..., model_name=guard_model_name) and train SVM/MLP and save them.\nguard = LatentGuard(\n    model=Model(protected_model),\n    guard_model_path=\"models/Llama-2-7b-chat-hf\",\n    guard_model_name=\"Llama-2-7b-chat-hf\",\n    svm_model_path=\"logs/svm.pkl\",\n    mlp_model_path=\"logs/mlp.pkl\",\n    train=True,            # <<-- perform training\n    log_file=\"logs/latentguard_train_log.json\"\n)\n\n# After training the guard is ready; you can also immediately test it:\nresult = guard.generate(\"How to delete system32?\")\nprint(\"Guard decision / response:\", result)\n`}\n    />\n\n    <h2>Example: inference/serving mode (<code>train=False</code>)</h2>\n    <CodeBlock\n      language=\"python\"\n      codeString={`\n# serve_with_latentguard.py\nimport os\nfrom SecurityCube.defender import LatentGuard, DefenderPipeline\nfrom SecurityCube.models import OpenAIModel, Model\n\nprotected_model = OpenAIModel(\n    model_name=\"gpt-3.5-turbo\",\n    api_key=os.environ.get(\"OPENAI_API_KEY\"),\n    base_url=os.environ.get(\"OPENAI_BASE_URL\"),\n    temperature=0.1\n)\n\n# In inference mode, LatentGuard will load classifiers from the provided paths.\nguard = LatentGuard(\n    model=Model(protected_model),\n    guard_model_path=\"models/Llama-2-7b-chat-hf\",\n    guard_model_name=\"Llama-2-7b-chat-hf\",\n    svm_model_path=\"logs/svm.pkl\",\n    mlp_model_path=\"logs/mlp.pkl\",\n    train=False,           # <<-- only inference\n    log_file=\"logs/latentguard_infer_log.json\"\n)\n\n# Use guard.generate(...) just like the target model's generate\nresponse = guard.generate(\"How to kill a process on my computer?\")\nprint(\"Guarded response:\", response)\n`}\n    />\n    \n    <h2>Citation</h2>\n    <pre>\n{`@inproceedings{zhou-etal-2024-alignment,\n  title = \"How Alignment and Jailbreak Work: Explain {LLM} Safety through Intermediate Hidden States\",\n  author = \"Zhou, Zhenhong  and\n    Yu, Haiyang  and\n    Zhang, Xinghua  and\n    Xu, Rongwu  and\n    Huang, Fei  and\n    Li, Yongbin\",\n  booktitle = \"Findings of the Association for Computational Linguistics: EMNLP 2024\",\n  month = nov,\n  year = \"2024\",\n  address = \"Miami, Florida, USA\",\n  publisher = \"Association for Computational Linguistics\",\n  url = \"https://aclanthology.org/2024.findings-emnlp.139/\",\n  doi = \"10.18653/v1/2024.findings-emnlp.139\",\n  pages = \"2461--2488\"\n}`}\n    </pre>\n  </>\n);\n\nexport default LatentGuardIntroduction;\n","// src/components/CodeBlock.jsx\n\nimport React, { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// 导入一个浅色主题，例如 'prism'。如果您想完全自定义，也可以不导入任何主题。\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism'; \n// 如果您想使用 vscDarkPlus 但只想改背景，可以导入 vscDarkPlus 并覆盖其背景色\n\n// 按钮的内联样式\nconst copyButtonStyle = {\n  position: 'absolute',\n  top: '0.8em',\n  right: '0.8em',\n  padding: '6px 12px',\n  border: '1px solid #ccc', // 浅色背景下边框颜色需要调整\n  borderRadius: '6px',\n  backgroundColor: '#e0e0e0', // 按钮背景色也调整为浅色\n  color: '#333', // 按钮文字颜色调整为深色\n  cursor: 'pointer',\n  fontSize: '14px',\n  opacity: 0.8,\n  transition: 'opacity 0.2s',\n  zIndex: 1, // 确保按钮在代码块之上\n};\n\n// 容器的样式\nconst containerStyle = {\n  position: 'relative',\n  maxWidth: '1200px', // 设置一个最大宽度，确保代码块不会过宽\n  margin: '0 auto',  // 让它在屏幕上居中显示\n};\nconst CodeBlock = ({ language, codeString }) => {\n  const [buttonText, setButtonText] = useState('Copy');\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(codeString).then(() => {\n      setButtonText('Copied!');\n      setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    }).catch(err => {\n      console.error('Failed to copy text: ', err);\n      setButtonText('Error');\n       setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    });\n  };\n\n  const handleMouseOver = (e) => e.currentTarget.style.opacity = 1;\n  const handleMouseOut = (e) => e.currentTarget.style.opacity = 0.8; // 浅色背景下，初始透明度可以稍微高一点\n\n  return (\n    <div style={containerStyle}>\n      <button \n        style={copyButtonStyle} \n        onClick={handleCopy}\n        onMouseOver={handleMouseOver}\n        onMouseOut={handleMouseOut}\n      >\n        {buttonText}\n      </button>\n      <SyntaxHighlighter \n        language={language} \n        // 使用一个浅色主题，例如 `prism`\n        style={prism} \n        // 覆盖主题的背景色，确保是白色系\n        customStyle={{\n            paddingTop: '2.5em',\n            backgroundColor: '#f8f8f8', // 浅灰色背景，更柔和\n            borderRadius: '8px', // 可以增加一些圆角\n            border: '1px solid #eee', // 增加一个浅边框\n        }}\n      >\n        {codeString.trim()}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nexport default CodeBlock;"],"names":["LatentGuardIntroduction","_jsxs","_Fragment","children","_jsx","className","CodeBlock","language","codeString","copyButtonStyle","position","top","right","padding","border","borderRadius","backgroundColor","color","cursor","fontSize","opacity","transition","zIndex","containerStyle","maxWidth","margin","_ref","buttonText","setButtonText","useState","style","onClick","handleCopy","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","onMouseOver","e","currentTarget","onMouseOut","SyntaxHighlighter","prism","customStyle","paddingTop","trim"],"sourceRoot":""}