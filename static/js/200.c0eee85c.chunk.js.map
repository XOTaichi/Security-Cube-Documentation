{"version":3,"file":"static/js/200.c0eee85c.chunk.js","mappings":"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","sources":["components/CodeBlock.jsx","chapters/defender/DefenderIntroduction.jsx"],"sourcesContent":["// src/components/CodeBlock.jsx\n\nimport React, { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// 导入一个浅色主题，例如 'prism'。如果您想完全自定义，也可以不导入任何主题。\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism'; \n// 如果您想使用 vscDarkPlus 但只想改背景，可以导入 vscDarkPlus 并覆盖其背景色\n\n// 按钮的内联样式\nconst copyButtonStyle = {\n  position: 'absolute',\n  top: '0.8em',\n  right: '0.8em',\n  padding: '6px 12px',\n  border: '1px solid #ccc', // 浅色背景下边框颜色需要调整\n  borderRadius: '6px',\n  backgroundColor: '#e0e0e0', // 按钮背景色也调整为浅色\n  color: '#333', // 按钮文字颜色调整为深色\n  cursor: 'pointer',\n  fontSize: '14px',\n  opacity: 0.8,\n  transition: 'opacity 0.2s',\n  zIndex: 1, // 确保按钮在代码块之上\n};\n\n// 容器的样式\nconst containerStyle = {\n  position: 'relative',\n  maxWidth: '1200px', // 设置一个最大宽度，确保代码块不会过宽\n  margin: '0 auto',  // 让它在屏幕上居中显示\n};\nconst CodeBlock = ({ language, codeString }) => {\n  const [buttonText, setButtonText] = useState('Copy');\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(codeString).then(() => {\n      setButtonText('Copied!');\n      setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    }).catch(err => {\n      console.error('Failed to copy text: ', err);\n      setButtonText('Error');\n       setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    });\n  };\n\n  const handleMouseOver = (e) => e.currentTarget.style.opacity = 1;\n  const handleMouseOut = (e) => e.currentTarget.style.opacity = 0.8; // 浅色背景下，初始透明度可以稍微高一点\n\n  return (\n    <div style={containerStyle}>\n      <button \n        style={copyButtonStyle} \n        onClick={handleCopy}\n        onMouseOver={handleMouseOver}\n        onMouseOut={handleMouseOut}\n      >\n        {buttonText}\n      </button>\n      <SyntaxHighlighter \n        language={language} \n        // 使用一个浅色主题，例如 `prism`\n        style={prism} \n        // 覆盖主题的背景色，确保是白色系\n        customStyle={{\n            paddingTop: '2.5em',\n            backgroundColor: '#f8f8f8', // 浅灰色背景，更柔和\n            borderRadius: '8px', // 可以增加一些圆角\n            border: '1px solid #eee', // 增加一个浅边框\n        }}\n      >\n        {codeString.trim()}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nexport default CodeBlock;","import CodeBlock from '../../components/CodeBlock'; \n\nconst DefenderIntroduction = () => (\n  <>\n    <h1>Defender Introduction</h1>\n    <p>The <code>DefenderPipeline</code> class, located in <code>SecurityCube/defender/base.py</code>, serves as an abstract base for building defender pipelines. It helps in safeguarding models by generating responses that resist adversarial attacks. Subclasses implement the <code>generate</code> method to produce a defense response based on the input prompt.</p>\n\n    <h2>DefenderPipeline Class Interface</h2>\n    <p>The <code>DefenderPipeline</code> class defines the following key components:</p>\n    <ul>\n      <li><strong>File location:</strong> <code>SecurityCube/defender/base.py</code></li>\n      <li><strong>Constructor:</strong> The <code>__init__</code> method initializes the defender pipeline.</li>\n      <li><strong>formalize(prompt):</strong> This method processes the raw input prompt and formalizes it for the defense pipeline, returning a list of messages with roles.</li>\n      <li><strong>generate(prompt):</strong> This abstract method must be implemented by subclasses to generate a defense response. It takes in:\n        <ul>\n          <li><code>prompt</code>: The input prompt which can be a string or a list of formatted <code>ChatMessage</code> objects.</li>\n        </ul>\n      </li>\n      <li><strong>Returns:</strong> The <code>generate</code> method must return a tuple with the following:\n        <ul>\n          <li>The generated response text (<code>str</code>).</li>\n          <li>Completion tokens used (<code>int</code>).</li>\n          <li>Prompt tokens used (<code>int</code>).</li>\n          <li>Total tokens used (<code>int</code>).</li>\n        </ul>\n      </li>\n    </ul>\n\n    <CodeBlock \n      language=\"python\" \n      codeString={`\nfrom abc import ABC, abstractmethod\nfrom typing import Union, List, Tuple, Dict, TypedDict\n\nclass ChatMessage(TypedDict):\n    \"\"\"Represents a single message in a conversation history.\"\"\"\n    role: str\n    content: str\n\n\nclass DefenderPipeline(ABC):\n    \"\"\"\n    Abstract base class for a defender pipeline.\n\n    Subclasses must implement the \\`generate\\` method and can override the\n    \\`formalize\\` method for custom prompt structuring.\n    \"\"\"\n\n    def formalize(self, prompt: str) -> List[ChatMessage]:\n        \"\"\"\n        Formalizes the user's input string into a basic message list.\n        \"\"\"\n        return [{\"role\": \"user\", \"content\": prompt}]\n\n    @abstractmethod\n    def generate(self, prompt: Union[str, List[ChatMessage]]) -> Tuple[str, int, int, int]:\n        \"\"\"\n        Generates a response and token counts from the defender pipeline.\n        \"\"\"\n        pass\n\n    def get_name(self) -> str:\n        \"\"\"Returns the name of the defender pipeline class.\"\"\"\n        return self.__class__.__name__\n`}\n    />\n\n    <h2>Common Types of Defense Methods</h2>\n    <p>We categorize defense methods into five types based on their deployment stage in the model pipeline:</p>\n    <ul>\n      <li><strong>Finetune-based:</strong> Enhance robustness by retraining or further aligning the model to specific defense strategies.</li>\n      <li><strong>System prompt:</strong> Insert safety instructions at the system prompt level to guide model behavior and prevent unsafe responses.</li>\n      <li><strong>Prefilter:</strong> Detect and block malicious inputs before they are processed by the model, often using classifiers or predefined rules.</li>\n      <li><strong>Intraprocess:</strong> Intervene during inference by modifying or monitoring the decoding process, ensuring that unsafe content is filtered at runtime.</li>\n      <li><strong>Postfilter:</strong> Filter or revise outputs after generation to suppress unsafe or harmful content, ensuring that the final response aligns with safety protocols.</li>\n    </ul>\n  </>\n);\n\nexport default DefenderIntroduction;\n"],"names":["copyButtonStyle","position","top","right","padding","border","borderRadius","backgroundColor","color","cursor","fontSize","opacity","transition","zIndex","containerStyle","maxWidth","margin","_ref","language","codeString","buttonText","setButtonText","useState","_jsxs","style","children","_jsx","onClick","handleCopy","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","onMouseOver","e","currentTarget","onMouseOut","SyntaxHighlighter","prism","customStyle","paddingTop","trim","DefenderIntroduction","_Fragment","CodeBlock"],"sourceRoot":""}