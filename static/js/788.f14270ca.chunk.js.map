{"version":3,"file":"static/js/788.f14270ca.chunk.js","mappings":"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","sources":["components/CodeBlock.jsx","chapters/language-models/framework-introduction.jsx"],"sourcesContent":["// src/components/CodeBlock.jsx\r\n\r\nimport React, { useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\n// 导入一个浅色主题，例如 'prism'。如果您想完全自定义，也可以不导入任何主题。\r\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism'; \r\n// 如果您想使用 vscDarkPlus 但只想改背景，可以导入 vscDarkPlus 并覆盖其背景色\r\n\r\n// 按钮的内联样式\r\nconst copyButtonStyle = {\r\n  position: 'absolute',\r\n  top: '0.8em',\r\n  right: '0.8em',\r\n  padding: '6px 12px',\r\n  border: '1px solid #ccc', // 浅色背景下边框颜色需要调整\r\n  borderRadius: '6px',\r\n  backgroundColor: '#e0e0e0', // 按钮背景色也调整为浅色\r\n  color: '#333', // 按钮文字颜色调整为深色\r\n  cursor: 'pointer',\r\n  fontSize: '14px',\r\n  opacity: 0.8,\r\n  transition: 'opacity 0.2s',\r\n  zIndex: 1, // 确保按钮在代码块之上\r\n};\r\n\r\n// 容器的样式\r\nconst containerStyle = {\r\n  position: 'relative',\r\n  maxWidth: '1200px', // 设置一个最大宽度，确保代码块不会过宽\r\n  margin: '0 auto',  // 让它在屏幕上居中显示\r\n};\r\nconst CodeBlock = ({ language, codeString }) => {\r\n  const [buttonText, setButtonText] = useState('Copy');\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(codeString).then(() => {\r\n      setButtonText('Copied!');\r\n      setTimeout(() => {\r\n        setButtonText('Copy');\r\n      }, 2000);\r\n    }).catch(err => {\r\n      console.error('Failed to copy text: ', err);\r\n      setButtonText('Error');\r\n       setTimeout(() => {\r\n        setButtonText('Copy');\r\n      }, 2000);\r\n    });\r\n  };\r\n\r\n  const handleMouseOver = (e) => e.currentTarget.style.opacity = 1;\r\n  const handleMouseOut = (e) => e.currentTarget.style.opacity = 0.8; // 浅色背景下，初始透明度可以稍微高一点\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <button \r\n        style={copyButtonStyle} \r\n        onClick={handleCopy}\r\n        onMouseOver={handleMouseOver}\r\n        onMouseOut={handleMouseOut}\r\n      >\r\n        {buttonText}\r\n      </button>\r\n      <SyntaxHighlighter \r\n        language={language} \r\n        // 使用一个浅色主题，例如 `prism`\r\n        style={prism} \r\n        // 覆盖主题的背景色，确保是白色系\r\n        customStyle={{\r\n            paddingTop: '2.5em',\r\n            backgroundColor: '#f8f8f8', // 浅灰色背景，更柔和\r\n            borderRadius: '8px', // 可以增加一些圆角\r\n            border: '1px solid #eee', // 增加一个浅边框\r\n        }}\r\n      >\r\n        {codeString.trim()}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeBlock;","import CodeBlock from '../../components/CodeBlock'; \r\nconst FrameworkIntroduction = () => (\r\n  <>\r\n    {/* <h1>Overview</h1>\r\n    <p>We provide a flexible framework for <strong>seamless interaction with various Large Language Models (LLMs)</strong>, like OpenAI and HuggingFace.</p>\r\n\r\n    <h2>Core Philosophy</h2>\r\n    <p>The heart of this framework is the <code>BaseLanguageModel</code> class located in <code>SecurityCube/models/base.py</code>. It offers a standardized interface for LLM interactions, ensuring consistency across different models. Key benefits include:</p>\r\n    <ul>\r\n      <li><strong>Unified Interface:</strong> Easily interact with different models (e.g., OpenAI, HuggingFace) through the same API.</li>\r\n      <li><strong>Easy Extension:</strong> Add new LLMs by inheriting the base class and implementing model-specific methods.</li>\r\n    </ul> */}\r\n    <h1>BaseLanguageModel Introduction</h1>\r\n<p>The <code>BaseLanguageModel</code> class, located in <code>SecurityCube/models/base.py</code>, provides a standardized interface for interacting with various language models. It supports essential methods for message handling and prompt generation, which can be extended for specific LLM implementations like OpenAI and HuggingFace.</p>\r\n\r\n<h2>BaseLanguageModel Class Interface</h2>\r\n<p>The <code>BaseLanguageModel</code> class defines the following key components:</p>\r\n<ul>\r\n  <li><strong>File location:</strong> <code>SecurityCube/models/base.py</code></li>\r\n  <li><strong>Constructor:</strong> The <code>__init__</code> method initializes the base language model and configures whether the model supports system prompts. By default, it assumes support for system prompts.</li>\r\n  <li><strong>_prepare_messages(prompt):</strong> A helper method that prepares the message list for API calls, handling system prompts correctly based on the model's capabilities.</li>\r\n  <li><strong>generate(prompt, **kwargs):</strong> An abstract method for generating a response from a given prompt. It must be implemented by all subclasses to provide model-specific functionality.</li>\r\n  <li><strong>continue_generate(dialog_hist, query, **kwargs):</strong> A method for continuing a conversation by appending a user query and generating the assistant's response, updating the conversation history.</li>\r\n</ul>\r\n\r\n<CodeBlock \r\n  language=\"python\" \r\n  codeString={`\r\nfrom abc import ABC, abstractmethod\r\nfrom typing import List, Tuple, Union, TypedDict\r\nimport copy\r\n\r\nclass ChatMessage(TypedDict):\r\n    \"\"\"Represents a single message in a conversation history.\"\"\"\r\n    role: str\r\n    content: str\r\n\r\nclass BaseLanguageModel(ABC):\r\n    \"\"\"\r\n    An abstract base class that defines the standard interface for a language model.\r\n    \"\"\"\r\n\r\n    def __init__(self, supports_system_prompt: bool = True):\r\n        \"\"\"\r\n        Initializes the base model.\r\n\r\n        Args:\r\n            supports_system_prompt (bool): Flag indicating if the model natively supports \r\n                                           the 'system' role in messages. Defaults to True.\r\n        \"\"\"\r\n        self.supports_system_prompt = supports_system_prompt\r\n\r\n    def _prepare_messages(self, prompt: Union[str, List[ChatMessage]]) -> List[ChatMessage]:\r\n        \"\"\"\r\n        Prepares the message list for the API call, handling system prompts correctly.\r\n\r\n        If the model does not support system prompts, it merges the system prompt\r\n        into the first user message.\r\n        \"\"\"\r\n        if isinstance(prompt, str):\r\n            return [{\"role\": \"user\", \"content\": prompt}]\r\n        \r\n        # Make a copy to avoid modifying the original list passed by the user\r\n        messages = copy.deepcopy(prompt)\r\n\r\n        if not messages or self.supports_system_prompt:\r\n            return messages\r\n\r\n        # Handle unsupported system prompt\r\n        if messages[0]['role'] == 'system':\r\n            system_message = messages.pop(0)\r\n            # Find the first user message to prepend the system prompt to\r\n            for message in messages:\r\n                if message['role'] == 'user':\r\n                    message['content'] = f\"{system_message['content']}\\n\\n---\\n\\n{message['content']}\"\r\n                    return messages\r\n            \r\n            # If no user message is found, convert the system message into a user message\r\n            return [{\"role\": \"user\", \"content\": system_message['content']}]\r\n\r\n        return messages\r\n\r\n    @abstractmethod\r\n    def generate(self, prompt: Union[str, List[ChatMessage]], **kwargs) -> Tuple[str, int, int, int]:\r\n        \"\"\"\r\n        Generates a response from a given prompt. This method must be implemented by all subclasses.\r\n        \"\"\"\r\n        pass\r\n\r\n    def continue_generate(self, dialog_hist: List[ChatMessage], query: str, **kwargs) -> Tuple[str, List[ChatMessage], int, int, int]:\r\n        \"\"\"\r\n        Continues a conversation by appending a new user query and generating a response.\r\n        \"\"\"\r\n        dialog_hist.append({\"role\": \"user\", \"content\": query})\r\n        \r\n        resp, completion_tokens, prompt_tokens, total_tokens = self.generate(\r\n            prompt=dialog_hist, \r\n            **kwargs\r\n        )\r\n        \r\n        dialog_hist.append({\"role\": \"assistant\", \"content\": resp})\r\n        \r\n        return resp, dialog_hist, completion_tokens, prompt_tokens, total_tokens\r\n`}/>\r\n\r\n    <h2>Component Breakdown</h2>\r\n    <ul>\r\n      <li><strong><code>BaseLanguageModel</code>:</strong> The abstract base class defining the core LLM interface.</li>\r\n      <li><strong><code>OpenAIModel</code>, <code>HuggingFaceModel</code>, etc:</strong> Subclasses implementing the actual model-specific logic.</li>\r\n    </ul>\r\n  </>\r\n);\r\n\r\nexport default FrameworkIntroduction;\r\n"],"names":["copyButtonStyle","position","top","right","padding","border","borderRadius","backgroundColor","color","cursor","fontSize","opacity","transition","zIndex","containerStyle","maxWidth","margin","_ref","language","codeString","buttonText","setButtonText","useState","_jsxs","style","children","_jsx","onClick","handleCopy","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","onMouseOver","e","currentTarget","onMouseOut","SyntaxHighlighter","prism","customStyle","paddingTop","trim","FrameworkIntroduction","_Fragment","CodeBlock"],"sourceRoot":""}