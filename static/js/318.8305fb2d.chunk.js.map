{"version":3,"file":"static/js/318.8305fb2d.chunk.js","mappings":"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","sources":["chapters/language-models/integrating-a-new-model.jsx","components/CodeBlock.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport CodeBlock from '../../components/CodeBlock'; \r\n\r\nconst init = `\r\ndef __init__(self, supports_system_prompt: bool = True):\r\n    self.supports_system_prompt = supports_system_prompt`\r\nconst prepare = `def _prepare_messages(self, prompt: Union[str, List[ChatMessage]]) -> List[ChatMessage]:\r\n    if isinstance(prompt, str): return [{\"role\": \"user\", \"content\": prompt}]\r\n    messages = copy.deepcopy(prompt)\r\n    if not messages or self.supports_system_prompt: return messages\r\n    if messages[0]['role'] == 'system':\r\n        system = messages.pop(0)\r\n        for m in messages:\r\n            if m['role'] == 'user': m['content'] = f\"{system['content']}. {m['content']}\"; return messages\r\n        return [{\"role\": \"user\", \"content\": system['content']}]\r\n    return messages\r\n`\r\nconst generate = `\r\n@abstractmethod\r\ndef generate(self, prompt: Union[str, List[ChatMessage]], **kwargs) -> Tuple[str, int, int, int]:\r\n    \"\"\"\r\n    Generates a response from a given prompt. This method must be implemented by all subclasses.\r\n    \"\"\"\r\n    pass`\r\nconst continue_generate = `\r\ndef continue_generate(self, dialog_hist: List[ChatMessage], query: str, **kwargs) -> Tuple[str, List[ChatMessage], int, int, int]:\r\n    dialog_hist.append({\"role\": \"user\", \"content\": query})\r\n            \r\n    resp, completion_tokens, prompt_tokens, total_tokens = self.generate(\r\n        prompt=dialog_hist, \r\n        **kwargs\r\n    )\r\n\r\n    dialog_hist.append({\"role\": \"assistant\", \"content\": resp})\r\n\r\n    return resp, dialog_hist, completion_tokens, prompt_tokens, total_tokens`\r\nconst prerequisiteCode = `pip install litellm`;\r\nconst step1Code = `# In custom_models.py\r\nfrom base_model import BaseLanguageModel, ChatMessage # Assuming your base class is in base_model.py\r\nfrom typing import List, Tuple, Union\r\nimport litellm\r\nimport os\r\n\r\n# Set your API keys if not already done in your environment\r\n# os.environ[\"OPENAI_API_KEY\"] = \"your-api-key\"\r\n\r\nclass LiteLLM(BaseLanguageModel):\r\n    \"\"\"\r\n    An implementation of BaseLanguageModel using the litellm library.\r\n    \"\"\"\r\n    pass # We will fill this in next.`;\r\nconst step2Code = `class LiteLLM(BaseLanguageModel):\r\n    \"\"\"\r\n    An implementation of BaseLanguageModel using the litellm library.\r\n    \"\"\"\r\n    def __init__(self, model_name: str, **kwargs):\r\n        \"\"\"\r\n        Initializes the LiteLLM model wrapper.\r\n\r\n        Args:\r\n            model_name (str): The model name to be passed to litellm \r\n                              (e.g., \"gpt-4o\", \"gemini/gemini-1.5-pro-latest\").\r\n        \"\"\"\r\n        # Call the parent constructor. Most models proxied by litellm support system prompts.\r\n        super().__init__(supports_system_prompt=True)\r\n        self.model_name = model_name\r\n        self.kwargs = kwargs # Store other potential litellm arguments`;\r\nconst step3Code = `class LiteLLM(BaseLanguageModel):\r\n    def __init__(self, model_name: str, **kwargs):\r\n        super().__init__(supports_system_prompt=True)\r\n        self.model_name = model_name\r\n        self.kwargs = kwargs\r\n\r\n    def generate(self, prompt: Union[str, List[ChatMessage]], **kwargs) -> Tuple[str, int, int, int]:\r\n        \"\"\"\r\n        Generates a response using the litellm.completion method.\r\n        \"\"\"\r\n        # 1. Use the inherited helper to prepare the final message list\r\n        messages = self._prepare_messages(prompt)\r\n\r\n        # Combine kwargs from initialization and this specific call\r\n        combined_kwargs = {**self.kwargs, **kwargs}\r\n\r\n        # 2. Call the litellm API\r\n        response = litellm.completion(\r\n            model=self.model_name,\r\n            messages=messages,\r\n            **combined_kwargs\r\n        )\r\n\r\n        # 3. Parse the response object\r\n        response_text = response.choices[0].message.content\r\n        usage = response.usage\r\n        completion_tokens = usage.completion_tokens\r\n        prompt_tokens = usage.prompt_tokens\r\n        total_tokens = usage.total_tokens\r\n        \r\n        # 4. Return the data in the required tuple format\r\n        return response_text, completion_tokens, prompt_tokens, total_tokens`;\r\nconst step4Code = `from base_model import BaseLanguageModel, ChatMessage # Assuming your base class is in base_model.py\r\nfrom typing import List, Tuple, Union\r\nimport litellm\r\n\r\nclass LiteLLM(BaseLanguageModel):\r\n    \"\"\"\r\n    An implementation of BaseLanguageModel using the litellm library.\r\n    \"\"\"\r\n    def __init__(self, model_name: str, **kwargs):\r\n        \"\"\"\r\n        Initializes the LiteLLM model wrapper.\r\n\r\n        Args:\r\n            model_name (str): The model name to be passed to litellm \r\n                              (e.g., \"gpt-4o\", \"claude-3-haiku\").\r\n        \"\"\"\r\n        super().__init__(supports_system_prompt=True)\r\n        self.model_name = model_name\r\n        self.kwargs = kwargs\r\n\r\n    def generate(self, prompt: Union[str, List[ChatMessage]], **kwargs) -> Tuple[str, int, int, int]:\r\n        \"\"\"\r\n        Generates a response using the litellm.completion method.\r\n        \"\"\"\r\n        messages = self._prepare_messages(prompt)\r\n        combined_kwargs = {**self.kwargs, **kwargs}\r\n\r\n        response = litellm.completion(\r\n            model=self.model_name,\r\n            messages=messages,\r\n            **combined_kwargs\r\n        )\r\n        \r\n        response_text = response.choices[0].message.content\r\n        usage = response.usage\r\n        \r\n        return (\r\n            response_text,\r\n            usage.completion_tokens,\r\n            usage.prompt_tokens,\r\n            usage.total_tokens\r\n        )`;\r\nconst step5Code = `# In your main application file\r\n# Make sure you have set your API key, e.g., os.environ[\"OPENAI_API_KEY\"] = \"...\"\r\n\r\nfrom custom_models import LiteLLM\r\n\r\n# Initialize the model for OpenAI's gpt-4o\r\nmy_model = LiteLLM(model_name=\"gpt-4o\", temperature=0.5)\r\n\r\n# --- Simple generation ---\r\nprint(\"--- Simple Generation ---\")\r\nresp, c_tokens, p_tokens, t_tokens = my_model.generate(\"Hello, what is the capital of France?\")\r\nprint(f\"Response: {resp}\")\r\nprint(f\"Tokens Used (Completion/Prompt/Total): {c_tokens}/{p_tokens}/{t_tokens}\\\\n\")\r\n\r\n# --- Multi-turn conversation ---\r\nprint(\"--- Multi-Turn Conversation ---\")\r\nconversation_history = [\r\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant that provides concise answers.\"}\r\n]\r\n\r\nresp, conversation_history, c_tokens, p_tokens, t_tokens = my_model.continue_generate(\r\n    dialog_hist=conversation_history,\r\n    query=\"What is the capital of Japan?\"\r\n)\r\n\r\nprint(f\"Assistant: {resp}\")\r\n\r\nresp, conversation_history, c_tokens, p_tokens, t_tokens = my_model.continue_generate(\r\n    dialog_hist=conversation_history,\r\n    query=\"And what is its primary international airport?\"\r\n)\r\nprint(f\"Assistant: {resp}\")\r\nprint(\"\\\\nFinal conversation history:\")\r\nprint(conversation_history)`;\r\n\r\n\r\nconst LiteLLMTutorial = () => {\r\n  return (\r\n    <article style={{padding: '1rem', fontFamily: 'sans-serif', lineHeight: '1.6'}}>\r\n      <h1>Customizing Your Own Model</h1>\r\n      <p>\r\n        This guide will walk you through the process of extending our framework to support a new language model. \r\n        By following the contract defined by the <code>BaseLanguageModel</code>, you can integrate virtually \r\n        any LLM provider with minimal effort. \r\n      </p>\r\n\r\n      {/* --- 新增章节 --- */}\r\n      <h2>Understanding the <code>BaseLanguageModel</code> Contract</h2>\r\n      <p>\r\n        Before we build our custom class, it's important to understand the contract set by the <code>BaseLanguageModel</code>. When you inherit from this base class, you gain access to several helpful methods and are required to implement only one core method.\r\n      </p>\r\n      <ul style={{ listStyleType: 'disc', paddingLeft: '20px' }}>\r\n        <li style={{ marginBottom: '10px' }}>\r\n          <strong><code>generate()</code> (Required to Implement):</strong> This is the only abstract method you <strong>must</strong> implement. Its job is to take a prompt, send it to the specific model's API, and return the response in a standardized tuple format: <code>(response_text, completion_tokens, prompt_tokens, total_tokens)</code>.\r\n          <CodeBlock language=\"python\" codeString={generate} />\r\n        </li>\r\n        <li style={{ marginBottom: '10px' }}>\r\n          <strong><code>continue_generate()</code> (Inherited):</strong> This method, which handles multi-turn conversations, is already fully implemented in the base class. It works by calling the <code>generate()</code> method you create. You get this functionality for free.\r\n          <CodeBlock language=\"python\" codeString={continue_generate}/>\r\n        </li>\r\n        <li style={{ marginBottom: '10px' }}>\r\n          <strong><code>_prepare_messages()</code> (Inherited Helper):</strong> This is a utility method provided by the base class to help you correctly format the list of messages before sending it to the API. This method automatically adapts to different model capabilities—for example, merging the system prompt into the first user prompt if system prompts are unsupported. It also serves as the centralized place to add custom transformations, such as injecting context, formatting, or filtering messages before sending them to the model.\r\n          <CodeBlock language=\"python\" codeString={prepare}/>\r\n        </li>\r\n        <li style={{ marginBottom: '10px' }}>\r\n          <strong><code>__init__()</code> (Constructor):</strong> When writing your subclass's constructor, you should remember to call <code>super().__init__()</code> to ensure the base class is properly initialized.\r\n          <CodeBlock language=\"python\" codeString={init}/>\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        This design means you only need to focus on the unique API communication logic for your new model, while the framework handles conversation management and data structuring.\r\n      </p>\r\n      {/* --- 新增章节结束 --- */}\r\n\r\n      <hr style={{margin: '2rem 0'}} />\r\n      <h2>A Step-by-Step Tutorial</h2>\r\n      \r\n      <h3>Prerequisites</h3>\r\n      <p>\r\n        Before you begin, ensure you have <code>litellm</code> installed and have configured the necessary \r\n        API keys for the model you intend to use (e.g., <code>OPENAI_API_KEY</code> in your environment variables).\r\n      </p>\r\n      <CodeBlock language=\"bash\" codeString={prerequisiteCode} />\r\n\r\n      <hr style={{margin: '2rem 0'}} />\r\n\r\n      <h3>Step 1: Create a New Subclass</h3>\r\n      <p>\r\n        First, create a new Python file (e.g., <code>custom_models.py</code>) and define a new class \r\n        that inherits from <code>BaseLanguageModel</code>.\r\n      </p>\r\n      <CodeBlock language=\"python\" codeString={step1Code} />\r\n\r\n      <hr style={{margin: '2rem 0'}} />\r\n\r\n      <h3>Step 2: Implement the Constructor (<code>__init__</code>)</h3>\r\n      <p>\r\n        The constructor is where you'll set up any model-specific configurations. For <code>litellm</code>, \r\n        we need to know which underlying model to call (e.g., <code>\"gpt-4o\"</code>, <code>\"claude-3-haiku\"</code>). \r\n        We'll pass this as an argument.\r\n      </p>\r\n      <p>\r\n        You must also call the parent class's constructor using <code>super().__init__()</code> to ensure \r\n        the base class is properly initialized. We can keep <code>supports_system_prompt=True</code> since \r\n        <code>litellm</code> handles this for most modern models.\r\n      </p>\r\n      <CodeBlock language=\"python\" codeString={step2Code} />\r\n\r\n      <hr style={{margin: '2rem 0'}} />\r\n      \r\n      <h3>Step 3: Implement the <code>generate</code> Method</h3>\r\n      <p>\r\n        This is the core of the integration. You must implement the <code>generate</code> method, which is marked \r\n        as an <code>@abstractmethod</code> in the base class. The implementation should follow the steps described in the new section above.\r\n      </p>\r\n      <CodeBlock language=\"python\" codeString={step3Code} />\r\n      \r\n      <hr style={{margin: '2rem 0'}} />\r\n\r\n      <h3>Step 4: Putting It All Together (Full Code)</h3>\r\n      <p>\r\n        Here is the complete, ready-to-use class.\r\n      </p>\r\n      <CodeBlock language=\"python\" codeString={step4Code} />\r\n\r\n      <hr style={{margin: '2rem 0'}} />\r\n\r\n      <h3>Step 5: Usage Example</h3>\r\n      <p>\r\n        Now you can use your new <code>LiteLLM</code> class just like any other model that conforms to the framework. \r\n        Notice that <code>continue_generate</code> works automatically without any extra implementation because \r\n        it's part of the base class.\r\n      </p>\r\n      <CodeBlock language=\"python\" codeString={step5Code} />\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default LiteLLMTutorial;","// src/components/CodeBlock.jsx\r\n\r\nimport React, { useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\n// 导入一个浅色主题，例如 'prism'。如果您想完全自定义，也可以不导入任何主题。\r\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism'; \r\n// 如果您想使用 vscDarkPlus 但只想改背景，可以导入 vscDarkPlus 并覆盖其背景色\r\n\r\n// 按钮的内联样式\r\nconst copyButtonStyle = {\r\n  position: 'absolute',\r\n  top: '0.8em',\r\n  right: '0.8em',\r\n  padding: '6px 12px',\r\n  border: '1px solid #ccc', // 浅色背景下边框颜色需要调整\r\n  borderRadius: '6px',\r\n  backgroundColor: '#e0e0e0', // 按钮背景色也调整为浅色\r\n  color: '#333', // 按钮文字颜色调整为深色\r\n  cursor: 'pointer',\r\n  fontSize: '14px',\r\n  opacity: 0.8,\r\n  transition: 'opacity 0.2s',\r\n  zIndex: 1, // 确保按钮在代码块之上\r\n};\r\n\r\n// 容器的样式\r\nconst containerStyle = {\r\n  position: 'relative',\r\n  maxWidth: '1200px', // 设置一个最大宽度，确保代码块不会过宽\r\n  margin: '0 auto',  // 让它在屏幕上居中显示\r\n};\r\nconst CodeBlock = ({ language, codeString }) => {\r\n  const [buttonText, setButtonText] = useState('Copy');\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(codeString).then(() => {\r\n      setButtonText('Copied!');\r\n      setTimeout(() => {\r\n        setButtonText('Copy');\r\n      }, 2000);\r\n    }).catch(err => {\r\n      console.error('Failed to copy text: ', err);\r\n      setButtonText('Error');\r\n       setTimeout(() => {\r\n        setButtonText('Copy');\r\n      }, 2000);\r\n    });\r\n  };\r\n\r\n  const handleMouseOver = (e) => e.currentTarget.style.opacity = 1;\r\n  const handleMouseOut = (e) => e.currentTarget.style.opacity = 0.8; // 浅色背景下，初始透明度可以稍微高一点\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <button \r\n        style={copyButtonStyle} \r\n        onClick={handleCopy}\r\n        onMouseOver={handleMouseOver}\r\n        onMouseOut={handleMouseOut}\r\n      >\r\n        {buttonText}\r\n      </button>\r\n      <SyntaxHighlighter \r\n        language={language} \r\n        // 使用一个浅色主题，例如 `prism`\r\n        style={prism} \r\n        // 覆盖主题的背景色，确保是白色系\r\n        customStyle={{\r\n            paddingTop: '2.5em',\r\n            backgroundColor: '#f8f8f8', // 浅灰色背景，更柔和\r\n            borderRadius: '8px', // 可以增加一些圆角\r\n            border: '1px solid #eee', // 增加一个浅边框\r\n        }}\r\n      >\r\n        {codeString.trim()}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeBlock;"],"names":["LiteLLMTutorial","_jsxs","style","padding","fontFamily","lineHeight","children","_jsx","listStyleType","paddingLeft","marginBottom","CodeBlock","language","codeString","margin","copyButtonStyle","position","top","right","border","borderRadius","backgroundColor","color","cursor","fontSize","opacity","transition","zIndex","containerStyle","maxWidth","_ref","buttonText","setButtonText","useState","onClick","handleCopy","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","onMouseOver","e","currentTarget","onMouseOut","SyntaxHighlighter","prism","customStyle","paddingTop","trim"],"sourceRoot":""}