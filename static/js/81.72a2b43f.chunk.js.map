{"version":3,"file":"static/js/81.72a2b43f.chunk.js","mappings":"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","sources":["chapters/attacker/AttackIntroduction.jsx","components/CodeBlock.jsx"],"sourcesContent":["import CodeBlock from '../../components/CodeBlock'; \r\nconst AttackerIntroduction = () => (\r\n  <>\r\n    <h1>Attacker Introduction</h1>\r\n    <p>The <code>AttackerPipeline</code> class, located in <code>SecurityCube/attacker/base.py</code>, serves as an abstract base for building synchronous attack pipelines. It allows attackers to exploit system vulnerabilities, particularly to bypass model safeguards like content moderation. Subclasses implement the <code>run</code> method to generate adversarial prompts based on specific attack goals.</p>\r\n\r\n    <h2>AttackerPipeline Class Interface</h2>\r\n    <p>The <code>AttackerPipeline</code> class defines the following key components:</p>\r\n    <ul>\r\n      <li><strong>File location:</strong> <code>SecurityCube/attacker/base.py</code></li>\r\n      <li><strong>Constructor:</strong> The <code>__init__</code> method initializes the attacker pipeline.</li>\r\n      <li><strong>run(goals, target):</strong> This abstract method must be implemented by subclasses to generate adversarial prompts. It takes in:\r\n        <ul>\r\n          <li><code>goals</code>: A list of attack objectives (e.g., \"How to make a bomb\").</li>\r\n          <li><code>target</code>: The defender to attack.</li>\r\n        </ul>\r\n      </li>\r\n      <li><strong>Returns:</strong> The <code>run</code> method must return a list of dictionaries, where each dictionary contains the results of the attack corresponding to each goal.</li>\r\n    </ul>\r\n\r\n    <CodeBlock \r\n      language=\"python\" \r\n      codeString={`\r\nfrom abc import ABC, abstractmethod\r\nfrom typing import List, Dict, Any\r\n\r\nclass AttackerPipeline(ABC):\r\n    \"\"\"\r\n    Abstract base class for asynchronous attacker pipeline.\r\n    \"\"\"\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n\r\n    @abstractmethod\r\n    def run(self, goals: List[str], target: Any) -> List[Dict[str, Any]]:\r\n        \"\"\"\r\n        Generates adversarial prompts based on goals.\r\n\r\n        Parameters:\r\n        goals (List[str]): Attack objectives.\r\n        target (Any): Target model to attack.\r\n\r\n        Returns:\r\n        List[Dict[str, Any]]: List of attack results.\r\n        \"\"\"\r\n        pass  # Abstract method, to be implemented by subclasses.\r\n\r\n        # Example result entry:\r\n        # {\r\n        #     \"original_question\":    # The original attack goal or question.\r\n        #     \"adversarial_prompt\":   # The adversarial prompt generated.\r\n        #     \"target_answer\":        # The model's response to the adversarial prompt.\r\n        #     \"prompt_token_cost\":    # Token cost for generating the adversarial prompt.\r\n        #     \"completion_token_cost\":  # Token cost for the model's response.\r\n        #     \"total_token_cost\":     # Total token cost (prompt + response).\r\n        #     \"target_prompt_token_cost\":  # Token cost for the target model's input prompt.\r\n        #     \"target_completion_token_cost\":   # Token cost for the target model's response.\r\n        #     \"target_total_token_cost\": # Total token cost for both input and output of the target model.\r\n        #     \"execution_time\": # Time taken to execute the entire attack, from prompt generation to model response.,\r\n        #     \"round_number\": # The current iteration or round of the attack process (useful for multi-round attacks).\r\n        # }\r\n\r\n`}\r\n    />\r\n\r\n    <h2>Common Types of Jailbreak Attacks</h2>\r\n    <ul>\r\n      <li><strong>Logprobe-based methods:</strong> These methods use information from log probes or gradients to construct harmful prompts aimed at manipulating the system.</li>\r\n      <li><strong>Shuffle-based methods:</strong> Attackers apply benign-looking modifications like scrambling token order or inserting separators to evade detection.</li>\r\n      <li><strong>LLM-based methods:</strong> External language models (LLMs) are used to generate, refine, or optimize adversarial prompts to exploit weaknesses in the target model.</li>\r\n      <li><strong>Multi-round (conversational) attacks:</strong> These attacks rely on turn-by-turn dialogue to incrementally bypass safeguards, often making it harder to detect.</li>\r\n      <li><strong>Flaw-based attacks:</strong> Exploiting specific model vulnerabilities, such as multilingual misalignment, to construct effective jailbreak prompts.</li>\r\n      <li><strong>Strategy-based attacks:</strong> Psychologically or procedurally manipulative prompts are used to influence the model’s behavior and bypass security measures.</li>\r\n      <li><strong>Template-based attacks:</strong> Algorithmic or brute-force generation based on templates or variations, allowing attackers to create a wide range of adversarial prompts.</li>\r\n    </ul>\r\n  </>\r\n);\r\n\r\nexport default AttackerIntroduction;\r\n","// src/components/CodeBlock.jsx\r\n\r\nimport React, { useState } from 'react';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\n// 导入一个浅色主题，例如 'prism'。如果您想完全自定义，也可以不导入任何主题。\r\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism'; \r\n// 如果您想使用 vscDarkPlus 但只想改背景，可以导入 vscDarkPlus 并覆盖其背景色\r\n\r\n// 按钮的内联样式\r\nconst copyButtonStyle = {\r\n  position: 'absolute',\r\n  top: '0.8em',\r\n  right: '0.8em',\r\n  padding: '6px 12px',\r\n  border: '1px solid #ccc', // 浅色背景下边框颜色需要调整\r\n  borderRadius: '6px',\r\n  backgroundColor: '#e0e0e0', // 按钮背景色也调整为浅色\r\n  color: '#333', // 按钮文字颜色调整为深色\r\n  cursor: 'pointer',\r\n  fontSize: '14px',\r\n  opacity: 0.8,\r\n  transition: 'opacity 0.2s',\r\n  zIndex: 1, // 确保按钮在代码块之上\r\n};\r\n\r\n// 容器的样式\r\nconst containerStyle = {\r\n  position: 'relative',\r\n  maxWidth: '1200px', // 设置一个最大宽度，确保代码块不会过宽\r\n  margin: '0 auto',  // 让它在屏幕上居中显示\r\n};\r\nconst CodeBlock = ({ language, codeString }) => {\r\n  const [buttonText, setButtonText] = useState('Copy');\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(codeString).then(() => {\r\n      setButtonText('Copied!');\r\n      setTimeout(() => {\r\n        setButtonText('Copy');\r\n      }, 2000);\r\n    }).catch(err => {\r\n      console.error('Failed to copy text: ', err);\r\n      setButtonText('Error');\r\n       setTimeout(() => {\r\n        setButtonText('Copy');\r\n      }, 2000);\r\n    });\r\n  };\r\n\r\n  const handleMouseOver = (e) => e.currentTarget.style.opacity = 1;\r\n  const handleMouseOut = (e) => e.currentTarget.style.opacity = 0.8; // 浅色背景下，初始透明度可以稍微高一点\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <button \r\n        style={copyButtonStyle} \r\n        onClick={handleCopy}\r\n        onMouseOver={handleMouseOver}\r\n        onMouseOut={handleMouseOut}\r\n      >\r\n        {buttonText}\r\n      </button>\r\n      <SyntaxHighlighter \r\n        language={language} \r\n        // 使用一个浅色主题，例如 `prism`\r\n        style={prism} \r\n        // 覆盖主题的背景色，确保是白色系\r\n        customStyle={{\r\n            paddingTop: '2.5em',\r\n            backgroundColor: '#f8f8f8', // 浅灰色背景，更柔和\r\n            borderRadius: '8px', // 可以增加一些圆角\r\n            border: '1px solid #eee', // 增加一个浅边框\r\n        }}\r\n      >\r\n        {codeString.trim()}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeBlock;"],"names":["AttackerIntroduction","_jsxs","_Fragment","children","_jsx","CodeBlock","language","codeString","copyButtonStyle","position","top","right","padding","border","borderRadius","backgroundColor","color","cursor","fontSize","opacity","transition","zIndex","containerStyle","maxWidth","margin","_ref","buttonText","setButtonText","useState","style","onClick","handleCopy","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","onMouseOver","e","currentTarget","onMouseOut","SyntaxHighlighter","prism","customStyle","paddingTop","trim"],"sourceRoot":""}