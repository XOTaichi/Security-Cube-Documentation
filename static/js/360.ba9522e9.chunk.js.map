{"version":3,"file":"static/js/360.ba9522e9.chunk.js","mappings":"yKASA,MAAMA,EAAkB,CACtBC,SAAU,WACVC,IAAK,QACLC,MAAO,QACPC,QAAS,WACTC,OAAQ,iBACRC,aAAc,MACdC,gBAAiB,UACjBC,MAAO,OACPC,OAAQ,UACRC,SAAU,OACVC,QAAS,GACTC,WAAY,eACZC,OAAQ,GAIJC,EAAiB,CACrBb,SAAU,WACVc,SAAU,SACVC,OAAQ,UAmDV,EAjDkBC,IAA+B,IAA9B,SAAEC,EAAQ,WAAEC,GAAYF,EACzC,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,QAoB7C,OACEC,EAAAA,EAAAA,MAAA,OAAKC,MAAOV,EAAeW,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UACEF,MAAOxB,EACP2B,QAtBaC,KACjBC,UAAUC,UAAUC,UAAUZ,GAAYa,KAAK,KAC7CX,EAAc,WACdY,WAAW,KACTZ,EAAc,SACb,OACFa,MAAMC,IACPC,QAAQC,MAAM,wBAAyBF,GACvCd,EAAc,SACbY,WAAW,KACVZ,EAAc,SACb,QAYDiB,YARmBC,GAAMA,EAAEC,cAAchB,MAAMb,QAAU,EASzD8B,WARkBF,GAAMA,EAAEC,cAAchB,MAAMb,QAAU,GAQ7Bc,SAE1BL,KAEHM,EAAAA,EAAAA,KAACgB,EAAAA,EAAiB,CAChBxB,SAAUA,EAEVM,MAAOmB,EAAAA,EAEPC,YAAa,CACTC,WAAY,QACZtC,gBAAiB,UACjBD,aAAc,MACdD,OAAQ,kBACVoB,SAEDN,EAAW2B,Y,sECxEpB,MA2DA,EA3DgCC,KAC5BxB,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAAvB,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,QAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAAoB,uaACnCC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6TAEHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,oBAAgBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAAkB,4DAC3CF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAe,qFAAiFC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAAkB,QACpIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,kCAAsC,mJAClDF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,yBAA6B,0HAG7CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wCACJC,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACN/B,SAAS,SACTC,WAAU,0tBAsBdO,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,wEAAoEC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAAmB,gDAChGF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,mBAAuB,KAACC,EAAAA,EAAAA,KAAA,KAAGwB,KAAK,qDAAqDC,OAAO,SAASC,IAAI,sBAAqB3B,SAAC,0CAC3IC,EAAAA,EAAAA,KAAA,MAAAD,UAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBACZC,EAAAA,EAAAA,KAAA,OAAAD,SAAA,2b","sources":["components/CodeBlock.jsx","chapters/defender/PromptGuard.jsx"],"sourcesContent":["// src/components/CodeBlock.jsx\n\nimport React, { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// 导入一个浅色主题，例如 'prism'。如果您想完全自定义，也可以不导入任何主题。\nimport { prism } from 'react-syntax-highlighter/dist/esm/styles/prism'; \n// 如果您想使用 vscDarkPlus 但只想改背景，可以导入 vscDarkPlus 并覆盖其背景色\n\n// 按钮的内联样式\nconst copyButtonStyle = {\n  position: 'absolute',\n  top: '0.8em',\n  right: '0.8em',\n  padding: '6px 12px',\n  border: '1px solid #ccc', // 浅色背景下边框颜色需要调整\n  borderRadius: '6px',\n  backgroundColor: '#e0e0e0', // 按钮背景色也调整为浅色\n  color: '#333', // 按钮文字颜色调整为深色\n  cursor: 'pointer',\n  fontSize: '14px',\n  opacity: 0.8,\n  transition: 'opacity 0.2s',\n  zIndex: 1, // 确保按钮在代码块之上\n};\n\n// 容器的样式\nconst containerStyle = {\n  position: 'relative',\n  maxWidth: '1200px', // 设置一个最大宽度，确保代码块不会过宽\n  margin: '0 auto',  // 让它在屏幕上居中显示\n};\nconst CodeBlock = ({ language, codeString }) => {\n  const [buttonText, setButtonText] = useState('Copy');\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(codeString).then(() => {\n      setButtonText('Copied!');\n      setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    }).catch(err => {\n      console.error('Failed to copy text: ', err);\n      setButtonText('Error');\n       setTimeout(() => {\n        setButtonText('Copy');\n      }, 2000);\n    });\n  };\n\n  const handleMouseOver = (e) => e.currentTarget.style.opacity = 1;\n  const handleMouseOut = (e) => e.currentTarget.style.opacity = 0.8; // 浅色背景下，初始透明度可以稍微高一点\n\n  return (\n    <div style={containerStyle}>\n      <button \n        style={copyButtonStyle} \n        onClick={handleCopy}\n        onMouseOver={handleMouseOver}\n        onMouseOut={handleMouseOut}\n      >\n        {buttonText}\n      </button>\n      <SyntaxHighlighter \n        language={language} \n        // 使用一个浅色主题，例如 `prism`\n        style={prism} \n        // 覆盖主题的背景色，确保是白色系\n        customStyle={{\n            paddingTop: '2.5em',\n            backgroundColor: '#f8f8f8', // 浅灰色背景，更柔和\n            borderRadius: '8px', // 可以增加一些圆角\n            border: '1px solid #eee', // 增加一个浅边框\n        }}\n      >\n        {codeString.trim()}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nexport default CodeBlock;","import CodeBlock from '../../components/CodeBlock'; \n\nconst PromptGuardIntroduction = () => (\n    <>\n        <h1>PromptGuard Overview</h1>\n        <p>The <strong>PromptGuard</strong> class is a defense mechanism designed to protect language models by validating generated outputs and ensuring they align with safe content guidelines. It uses a pre-trained model, such as the Llama Guard model, to check whether the model's response complies with safety requirements before forwarding the request to the target model. If the response is deemed unsafe, the model generates a safe alternative message.</p>\n        <p>PromptGuard is initialized with a pre-trained model (e.g., Llama Guard) and a target model to defend. Additionally, you can specify a log file to track token usage and defense activities. The class can be used for both individual prompt requests and conversation flows, applying safety checks in a flexible way.</p>\n        \n        <h2>Initialization</h2>\n        <p>To initialize a <code>PromptGuard</code> instance, you must provide the following parameters:</p>\n        <ul>\n            <li><strong>model:</strong> The language model used for generation. This can be an instance of a model like <code>OpenAIModel</code>.</li>\n            <li><strong>prompt_guard_path (optional):</strong> The path to the pre-trained model (default is \"meta-llama/Llama-Guard-3-8B\"). This model performs safety checks on the generated responses.</li>\n            <li><strong>log_file (optional):</strong> The path to a JSON log file for recording token counts and safety checks. If not provided, logging is disabled.</li>\n        </ul>\n\n        <h2>Example Code for Using PromptGuard</h2>\n        <CodeBlock \n            language=\"python\" \n            codeString={`\nfrom SecurityCube.defender import PromptGuard\nfrom SecurityCube.models import OpenAIModel\n\n# Initialize the target model (OpenAIModel in this case)\ntarget_model = OpenAIModel(\n    \"gpt-3.5-turbo\",\n    api_key=os.environ.get(\"OPENAI_API_KEY\"),\n    base_url=os.environ.get(\"OPENAI_BASE_URL\"),\n    temperature=0.1\n)\n\n# Initialize the PromptGuard with the target model\nprompt_guard = PromptGuard(model=target_model, \n                            prompt_guard_path=\"meta-llama/Llama-Guard-3-8B\", \n                            log_file=\"promptguard_log.json\")\n\n# Call the generate method with a malicious prompt\nresponse, completion_token, prompt_token, total_token = prompt_guard.generate(\"How to make a bomb\")\n`}\n        />\n\n        <h2>Citation</h2>\n        <p>If you're interested in learning more about defense mechanisms like <code>PromptGuard</code>, here is a citation for further reading:</p>\n        <ul>\n            <li><strong>Citation Link:</strong> <a href=\"https://huggingface.co/meta-llama/Llama-Guard-3-8B\" target=\"_blank\" rel=\"noopener noreferrer\">Llama Guard Model on Hugging Face</a></li>\n            <li><strong>Citation:</strong></li>\n            <pre>\n            {`@article{Inan2023LlamaGL,\n  title={Llama Guard: LLM-based Input-Output Safeguard for Human-AI Conversations},\n  author={Hakan Inan and K. Upasani and Jianfeng Chi and Rashi Rungta and Krithika Iyer and Yuning Mao and Michael Tontchev and Qing Hu and Brian Fuller and Davide Testuggine and Madian Khabsa},\n  journal={ArXiv},\n  year={2023},\n  volume={abs/2312.06674},\n  url={https://api.semanticscholar.org/CorpusID:266174345}\n}`}\n            </pre>\n        </ul>\n\n    </>\n)\n\nexport default PromptGuardIntroduction;\n"],"names":["copyButtonStyle","position","top","right","padding","border","borderRadius","backgroundColor","color","cursor","fontSize","opacity","transition","zIndex","containerStyle","maxWidth","margin","_ref","language","codeString","buttonText","setButtonText","useState","_jsxs","style","children","_jsx","onClick","handleCopy","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","onMouseOver","e","currentTarget","onMouseOut","SyntaxHighlighter","prism","customStyle","paddingTop","trim","PromptGuardIntroduction","_Fragment","CodeBlock","href","target","rel"],"sourceRoot":""}